generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Slot {
  id        String     @id @default(cuid())
  startTime DateTime   @unique
  duration  Int
  holdUntil DateTime?
  holdKey   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    SlotStatus @default(free)
  booking   Booking?   @relation("SlotBooking")

  @@index([startTime])
  @@index([status, startTime, holdUntil])
  @@index([holdKey, holdUntil])
}

model AvailabilityRule {
  id            String   @id @default(cuid())
  weekday       Int      @unique
  openMinute    Int
  closeMinute   Int
  effectiveFrom DateTime @default(now())
  createdAt     DateTime @default(now())
}

model AvailabilityException {
  id          String   @id @default(cuid())
  date        DateTime
  openMinute  Int?
  closeMinute Int?
  blocked     Boolean  @default(false)

  @@index([date])
}

model Booking {
  id               String     @id @default(cuid())
  sessionType      String
  status           String     @default("unpaid")
  slotId           String?    @unique
  liveMinutes      Int
  followups        Int        @default(0)
  discord          String
  notes            String?
  createdAt        DateTime   @default(now())
  stripeSessionId  String?    @unique
  paymentProvider  String?
  paymentRef       String?    @unique
  amountCents      Int?
  currency         String     @default("eur")
  blockCsv         String?
  customerEmail    String?
  scheduledStart   DateTime
  scheduledMinutes Int
  liveBlocks       Int        @default(0)
  waiverAccepted   Boolean    @default(false)
  waiverAcceptedAt DateTime?
  waiverIp         String?
  slot             Slot?      @relation("SlotBooking", fields: [slotId], references: [id])
  emailLogs        EmailLog[]

  @@index([createdAt])
  @@index([scheduledStart])
}

model ProcessedEvent {
  id        String   @id
  createdAt DateTime @default(now())

  @@index([createdAt])
}

model EmailLog {
  id        String   @id @default(cuid())
  bookingId String
  kind      String
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, kind])
  @@index([bookingId])
}

model WebhookEvent {
  id        String   @id @default(cuid())
  type      String
  payload   Json?
  createdAt DateTime @default(now())

  @@index([type, createdAt])
}

enum SlotStatus {
  free
  taken
  blocked
}

// ===== Adjusted enums =====
enum Visibility {
  PRIVATE
  STUDENT
}

// ===== Models =====
model Student {
  id      String  @id @default(cuid())
  name    String  @unique
  discord String? @unique
  puuid   String? @unique
  server  String? // e.g., euw1, na1, kr  (was: platform)

  // Keep BOTH: Riot needs summonerId for league API; riotTag is display ("Name#TAG")
  summonerId String? // internal Riot Summoner ID (for /league)
  riotTag    String? // "GameName#Tag", optional

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions    Session[]
  assets      Asset[]
  sessionDocs SessionDoc[]
  Note        Note[]

  @@index([puuid])
}

model Session {
  id          String   @id @default(cuid())
  studentId   String
  scheduledAt DateTime
  summary     String?
  createdAt   DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  notes   Note[]
  assets  Asset[]
}

model Note {
  id         String     @id @default(cuid())
  studentId  String
  sessionId  String?
  title      String
  bodyMd     String
  visibility Visibility @default(PRIVATE)
  createdAt  DateTime   @default(now())

  student Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id])
}

model Asset {
  id         String     @id @default(cuid())
  studentId  String
  sessionId  String?
  type       String
  storageKey String
  url        String
  mime       String?
  size       Int?
  visibility Visibility @default(PRIVATE)
  createdAt  DateTime   @default(now())

  student Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id])

  @@index([studentId])
}

// SoloQ only; simplified snapshot
model RankSnapshot {
  id         String   @id @default(cuid())
  puuid      String
  server     String // was: platform
  capturedAt DateTime @default(now())
  tier       String
  division   String?
  lp         Int

  @@index([puuid, capturedAt])
  @@index([capturedAt])
}

model SessionDoc {
  id        String   @id @default(cuid())
  studentId String
  number    Int
  notes     Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, number])
  @@index([studentId]) // optional, good for queries
}
