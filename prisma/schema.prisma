generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum SlotStatus {
  free
  taken
  blocked
}

model Slot {
  id         String     @id @default(cuid())
  startTime  DateTime   @unique
  duration   Int
  status     SlotStatus @default(free)
  holdUntil  DateTime?
  holdKey    String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  booking    Booking?   @relation("SlotBooking")

  // Indexes to speed up availability/hold queries
  @@index([startTime])
  @@index([status, startTime, holdUntil])
  @@index([holdKey, holdUntil])
}

model AvailabilityRule {
  id            String   @id @default(cuid())
  weekday       Int      @unique // 0=Sun â€¦ 6=Sat
  openMinute    Int      // minutes from midnight
  closeMinute   Int      // exclusive
  effectiveFrom DateTime @default(now())
  createdAt     DateTime @default(now())
}

model AvailabilityException {
  id          String   @id @default(cuid())
  date        DateTime
  openMinute  Int?
  closeMinute Int?
  blocked     Boolean  @default(false)

  @@index([date])
}

model Booking {
  id               String     @id @default(cuid())
  sessionType      String
  status           String     @default("unpaid")
  slotId           String?    @unique   // may be null (snapshot used)
  liveMinutes      Int
  liveBlocks       Int        @default(0)   // replaces outdated inGame boolean
  followups        Int        @default(0)
  discord          String
  notes            String?
  createdAt        DateTime   @default(now())
  stripeSessionId  String?    @unique
  paymentProvider  String?
  paymentRef       String?    @unique
  amountCents      Int?
  currency         String     @default("eur")
  blockCsv         String?
  customerEmail    String?

  // Waiver info
  waiverAccepted   Boolean    @default(false)
  waiverAcceptedAt DateTime?
  waiverIp         String?

  // Permanent schedule snapshot
  scheduledStart   DateTime
  scheduledMinutes Int

  slot       Slot?      @relation("SlotBooking", fields: [slotId], references: [id], onDelete: SetNull)
  emailLogs  EmailLog[]

  // Helpful query indexes
  @@index([createdAt])
  @@index([scheduledStart])
}

model ProcessedEvent {
  id        String   @id
  createdAt DateTime @default(now())

  @@index([createdAt])
}

model EmailLog {
  id        String   @id @default(cuid())
  bookingId String
  kind      String
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, kind])
  @@index([bookingId])
}

model WebhookEvent {
  id        String   @id @default(cuid())
  type      String
  payload   Json?
  createdAt DateTime @default(now())

  @@index([type, createdAt])
}
