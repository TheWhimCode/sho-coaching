generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Slot {
  id        String   @id @default(cuid())
  startTime DateTime  @unique
  duration  Int
  isTaken   Boolean   @default(false)

  // NEW: status lets you block slots instead of deleting
  status    String    @default("free") // "free" | "taken" | "blocked"

  holdUntil DateTime?
  holdKey   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  booking   Booking?  @relation("SlotBooking")

  @@index([startTime])
}

model AvailabilityRule {
  id            String   @id @default(cuid())
  weekday       Int      // 0=Sun â€¦ 6=Sat
  openMinute    Int      // minutes from midnight
  closeMinute   Int      // exclusive
  effectiveFrom DateTime @default(now())
  createdAt     DateTime @default(now())
}

model AvailabilityException {
  id         String   @id @default(cuid())
  date       DateTime @unique // specific day at 00:00
  openMinute Int?
  closeMinute Int?
  blocked    Boolean  @default(false)
  reason     String?
  createdAt  DateTime @default(now())
}


model Booking {
  id              String     @id @default(cuid())
  sessionType     String
  status          String     @default("unpaid")
  slotId          String?    @unique   // now optional
  liveMinutes     Int
  inGame          Boolean    @default(false)
  followups       Int        @default(0)
  discord         String
  notes           String?
  createdAt       DateTime   @default(now())
  stripeSessionId String?    @unique
  paymentProvider String?
  paymentRef      String?    @unique
  amountCents     Int?
  currency        String     @default("eur")
  blockCsv        String?
  customerEmail   String?

  // NEW: permanent schedule snapshot
  scheduledStart   DateTime
  scheduledMinutes Int

  slot            Slot?      @relation("SlotBooking", fields: [slotId], references: [id], onDelete: SetNull)
  emailLogs       EmailLog[]
}

model ProcessedEvent {
  id        String   @id
  createdAt DateTime @default(now())
}

model EmailLog {
  id        String   @id @default(cuid())
  bookingId String
  kind      String
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, kind])
  @@index([bookingId])
}

model WebhookEvent {
  id        String   @id @default(cuid())
  type      String
  payload   Json?
  createdAt DateTime @default(now())
}
