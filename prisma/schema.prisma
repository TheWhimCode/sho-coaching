generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Slot {
  id        String     @id @default(cuid())
  startTime DateTime   @unique
  duration  Int
  holdUntil DateTime?
  holdKey   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    SlotStatus @default(free)

  // Relation to Session (anchor slot)
  session   Session?   @relation("SlotSession")

  @@index([startTime])
  @@index([status, startTime, holdUntil])
  @@index([holdKey, holdUntil])
}

model AvailabilityRule {
  id            String   @id @default(cuid())
  weekday       Int      @unique
  openMinute    Int
  closeMinute   Int
  effectiveFrom DateTime @default(now())
  createdAt     DateTime @default(now())
}

model AvailabilityException {
  id          String   @id @default(cuid())
  date        DateTime
  openMinute  Int?
  closeMinute Int?
  blocked     Boolean  @default(false)

  @@index([date])
}

model Session {
  id               String     @id @default(cuid())
  sessionType      String
  status           String     @default("unpaid")
  slotId           String?    @unique
  liveMinutes      Int
  followups        Int        @default(0)
  discord          String
  riotTag          String?
  notes            String?
  createdAt        DateTime   @default(now())
  paymentProvider  String?
  paymentRef       String?    @unique
  amountCents      Int?
  currency         String     @default("eur")
  blockCsv         String?
  customerEmail    String?
  scheduledStart   DateTime
  scheduledMinutes Int
  liveBlocks       Int        @default(0)
  waiverAccepted   Boolean    @default(false)
  waiverAcceptedAt DateTime?
  waiverIp         String?

  // relations
  slot       Slot?       @relation("SlotSession", fields: [slotId], references: [id])
  emailLogs  EmailLog[]
  studentId  String?
  student    Student?    @relation(fields: [studentId], references: [id])

  // One-to-one link to SessionDoc
  sessionDoc SessionDoc? @relation("SessionToDoc")

  @@index([createdAt])
  @@index([scheduledStart])
}

model ProcessedEvent {
  id        String   @id
  createdAt DateTime @default(now())

  @@index([createdAt])
}

model EmailLog {
  id        String   @id @default(cuid())
  sessionId String
  kind      String
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, kind])
  @@index([sessionId])
}

model WebhookEvent {
  id        String   @id @default(cuid())
  type      String
  payload   Json?
  createdAt DateTime @default(now())

  @@index([type, createdAt])
}

enum SlotStatus {
  free
  taken
  blocked
}

// ===== Models =====
model Student {
  id        String   @id @default(cuid())
  name      String   @unique
  discord   String?  @unique
  puuid     String?  @unique
  server    String?  // e.g., euw1, na1, kr
  riotTag   String?  // "GameName#Tag"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions      Session[]
  sessionDocs   SessionDoc[]
  rankSnapshots RankSnapshot[]
  assets        StudentAsset[]

  @@index([puuid])
}

// Global asset library (all graphics/resources you upload)
model AssetLibrary {
  id         String   @id @default(cuid())
  name       String
  type       String
  storageKey String
  url        String
  mime       String?
  size       Int?
  createdAt  DateTime @default(now())

  students   StudentAsset[]
}

// Attach assets from the library to students
model StudentAsset {
  id         String        @id @default(cuid())
  studentId  String
  assetId    String
  createdAt  DateTime      @default(now())

  student    Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  asset      AssetLibrary  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([studentId, assetId])
  @@index([studentId])
  @@index([assetId])
}

model RankSnapshot {
  id         String   @id @default(cuid())
  studentId  String
  capturedAt DateTime @default(now())
  tier       String
  division   String?
  lp         Int

  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, capturedAt])
  @@index([capturedAt])
}

model SessionDoc {
  id         String   @id @default(cuid())
  studentId  String
  number     Int
  notes      Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // One-to-one FK to Session (+ relation wiring)
  sessionId  String?  @unique
  session    Session? @relation("SessionToDoc", fields: [sessionId], references: [id], onDelete: SetNull)

  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, number])
  @@index([studentId])
  @@index([sessionId])
}
